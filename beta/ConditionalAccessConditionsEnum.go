// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

// ConditionalAccessConditions undocumented
type ConditionalAccessConditions string

const (
	// ConditionalAccessConditionsVNone undocumented
	ConditionalAccessConditionsVNone ConditionalAccessConditions = "None"
	// ConditionalAccessConditionsVApplication undocumented
	ConditionalAccessConditionsVApplication ConditionalAccessConditions = "Application"
	// ConditionalAccessConditionsVUsers undocumented
	ConditionalAccessConditionsVUsers ConditionalAccessConditions = "Users"
	// ConditionalAccessConditionsVDevicePlatform undocumented
	ConditionalAccessConditionsVDevicePlatform ConditionalAccessConditions = "DevicePlatform"
	// ConditionalAccessConditionsVLocation undocumented
	ConditionalAccessConditionsVLocation ConditionalAccessConditions = "Location"
	// ConditionalAccessConditionsVClientType undocumented
	ConditionalAccessConditionsVClientType ConditionalAccessConditions = "ClientType"
	// ConditionalAccessConditionsVSignInRisk undocumented
	ConditionalAccessConditionsVSignInRisk ConditionalAccessConditions = "SignInRisk"
	// ConditionalAccessConditionsVUserRisk undocumented
	ConditionalAccessConditionsVUserRisk ConditionalAccessConditions = "UserRisk"
	// ConditionalAccessConditionsVTime undocumented
	ConditionalAccessConditionsVTime ConditionalAccessConditions = "Time"
	// ConditionalAccessConditionsVDeviceState undocumented
	ConditionalAccessConditionsVDeviceState ConditionalAccessConditions = "DeviceState"
	// ConditionalAccessConditionsVClient undocumented
	ConditionalAccessConditionsVClient ConditionalAccessConditions = "Client"
)

// ConditionalAccessConditionsPNone returns a pointer to ConditionalAccessConditionsVNone
func ConditionalAccessConditionsPNone() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVNone
	return &v
}

// ConditionalAccessConditionsPApplication returns a pointer to ConditionalAccessConditionsVApplication
func ConditionalAccessConditionsPApplication() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVApplication
	return &v
}

// ConditionalAccessConditionsPUsers returns a pointer to ConditionalAccessConditionsVUsers
func ConditionalAccessConditionsPUsers() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVUsers
	return &v
}

// ConditionalAccessConditionsPDevicePlatform returns a pointer to ConditionalAccessConditionsVDevicePlatform
func ConditionalAccessConditionsPDevicePlatform() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVDevicePlatform
	return &v
}

// ConditionalAccessConditionsPLocation returns a pointer to ConditionalAccessConditionsVLocation
func ConditionalAccessConditionsPLocation() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVLocation
	return &v
}

// ConditionalAccessConditionsPClientType returns a pointer to ConditionalAccessConditionsVClientType
func ConditionalAccessConditionsPClientType() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVClientType
	return &v
}

// ConditionalAccessConditionsPSignInRisk returns a pointer to ConditionalAccessConditionsVSignInRisk
func ConditionalAccessConditionsPSignInRisk() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVSignInRisk
	return &v
}

// ConditionalAccessConditionsPUserRisk returns a pointer to ConditionalAccessConditionsVUserRisk
func ConditionalAccessConditionsPUserRisk() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVUserRisk
	return &v
}

// ConditionalAccessConditionsPTime returns a pointer to ConditionalAccessConditionsVTime
func ConditionalAccessConditionsPTime() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVTime
	return &v
}

// ConditionalAccessConditionsPDeviceState returns a pointer to ConditionalAccessConditionsVDeviceState
func ConditionalAccessConditionsPDeviceState() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVDeviceState
	return &v
}

// ConditionalAccessConditionsPClient returns a pointer to ConditionalAccessConditionsVClient
func ConditionalAccessConditionsPClient() *ConditionalAccessConditions {
	v := ConditionalAccessConditionsVClient
	return &v
}
